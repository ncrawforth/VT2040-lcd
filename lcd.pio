.program lcd
.side_set 1              ; Start with the CLK pin high
.wrap_target
  out pins, 1 side 0 ; Set the MOSI pin and set the CLK pin low
  nop         side 1 ; Set the CLK pin high
.wrap

% c-sdk {
  static inline void lcd_pio_init() {
    // Hold the CS pin low
    gpio_init(LCD_PIN_CS);
    gpio_set_dir(LCD_PIN_CS, GPIO_OUT);
    gpio_put(LCD_PIN_CS, 0);
    // Hold the RST pin high
    gpio_init(LCD_PIN_RST);
    gpio_set_dir(LCD_PIN_RST, GPIO_OUT);
    gpio_put(LCD_PIN_RST, 1);
    // Initialise the DC pin
    gpio_init(LCD_PIN_DC);
    gpio_set_dir(LCD_PIN_DC, GPIO_OUT);
    // Install the PIO program
    uint offset = pio_add_program(LCD_PIO, &lcd_program);
    pio_sm_config c = lcd_program_get_default_config(offset);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_out_shift(&c, false, true, 8);
    pio_sm_init(LCD_PIO, LCD_PIO_SM, offset, &c);
    pio_sm_set_enabled(LCD_PIO, LCD_PIO_SM, true);
    // Set the clock divisor
    sm_config_set_clkdiv(&c, LCD_PIO_CLKDIV_CMD);
    // Initialise the MOSI pin
    pio_gpio_init(LCD_PIO, LCD_PIN_MOSI);
    pio_sm_set_consecutive_pindirs(LCD_PIO, LCD_PIO_SM, LCD_PIN_MOSI, 1, true);
    sm_config_set_out_pins(&c, LCD_PIN_MOSI, 1);
    // Initialise the CLK pin
    pio_gpio_init(LCD_PIO, LCD_PIN_CLK);
    pio_sm_set_consecutive_pindirs(LCD_PIO, LCD_PIO_SM, LCD_PIN_CLK, 1, true);
    sm_config_set_sideset_pins(&c, LCD_PIN_CLK);
  }

  static inline void lcd_pio_set_dc(bool dc) {
    // Wait until the PIO stalls (meaning it has finished sending)
    uint32_t sm_stall_mask = 1u << (LCD_PIO_SM + PIO_FDEBUG_TXSTALL_LSB);
    LCD_PIO->fdebug = sm_stall_mask;
    while (!(LCD_PIO->fdebug & sm_stall_mask)) tight_loop_contents();
    // Set the Data/Cmd pin (0 = Cmd, 1 = Data)
    gpio_put(LCD_PIN_DC, dc);
  }

  static inline void lcd_pio_put(uint8_t byte) {
    // Wait until there is space in the PIO's TX FIFO
    while (pio_sm_is_tx_fifo_full(LCD_PIO, LCD_PIO_SM)) tight_loop_contents();
    // Add 1 byte of data to the FIFO
    *(volatile uint8_t*)&LCD_PIO->txf[LCD_PIO_SM] = byte;
  }
%}
